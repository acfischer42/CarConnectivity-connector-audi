[build-system]
requires = [
    "setuptools>=61.0",
    "setuptools_scm>=8"
]
build-backend = "setuptools.build_meta"

[project]
name = "carconnectivity-connector-audi"
description = "CarConnectivity connector for Audi services - integrates with Till Steinbach's CarConnectivity framework"
dynamic = ["version"]
requires-python = ">=3.9"
authors = [
    { name = "Achim Fischer based on work of Till Steinbach" }
]
dependencies = [
    "carconnectivity>=0.8",
    "oauthlib~=3.3.1",
    "requests~=2.32.3",
    "pyjwt~=2.10"
]
readme = "README.md"
license = "MIT"
license-files = ["LICENSE"]
keywords = ["audi", "car", "connectivity", "api", "myaudi", "automotive", "carconnectivity"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
    "Topic :: Home Automation",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
]

[project.urls]
Homepage = "https://github.com/acfischer42/CarConnectivity-connector-audi"
Repository = "https://github.com/acfischer42/CarConnectivity-connector-audi"
Issues = "https://github.com/acfischer42/CarConnectivity-connector-audi/issues"
"CarConnectivity Framework" = "https://github.com/tillsteinbach/CarConnectivity"
"CarConnectivity CLI" = "https://github.com/tillsteinbach/CarConnectivity-cli"

[tool.setuptools]
include-package-data = false

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["*.testing*", "*testing*"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools_scm]
write_to = "src/carconnectivity_connectors/audi/_version.py"

[tool.black]
line-length = 127
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 127
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable
disallow_incomplete_defs = false  # Gradually enable
check_untyped_defs = true
disallow_untyped_decorators = false  # Gradually enable
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument
]

[tool.pylint.format]
max-line-length = 127
ignore-patterns = "_version.py"

[tool.bandit]
exclude_dirs = ["tests", "test"]
skips = [
    "B101",  # assert_used - allow asserts in test code
    "B601",  # paramiko_calls - if using paramiko
]
